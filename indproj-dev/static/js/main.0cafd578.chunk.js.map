{"version":3,"sources":["components/About.js","components/Contact.js","components/Footer.js","components/Header.js","util/util.js","assets/adding_nodes.gif","assets/removing_nodes.gif","assets/adding_removing_edges.gif","assets/updating_edge_weight.gif","components/Guide.js","components/CreateTools.js","components/AlgInfo.js","components/AlgorithmSelector.js","components/Playback.js","components/CodeViewer.js","components/Graph.js","components/Legend.js","algorithms/index.js","algorithms/bfs.js","algorithms/dijkstra.js","components/GraphBuilder.js","App.js","index.js","constant/config.js"],"names":["about","props","id","Modal","Header","closeButton","className","Body","href","config","sourceCode","target","rel","developerUrl","icon","faGithub","linkedin","faLinkedin","developerWebsite","faAt","Footer","Button","onClick","onClose","emailRegex","RegExp","validateFirstname","firstname","length","firstnameChars","validateSurname","surname","surnameChars","validateEmail","email","test","validateContent","content","contentChars","postForm","a","requestOptions","method","headers","Accept","body","JSON","stringify","fetch","formspreeEndpoint","then","response","json","resp","ok","minMessages","limit","minCharMessage","replace","Contact","state","firstnameMessage","surnameMessage","emailMessage","contentMessage","submitMessage","failedPost","posted","loading","customCallback","e","preventDefault","this","setState","validateForm","formPosted","contactFormSuccess","contactFormFailure","contactFormError","value","firstnameValid","surnameValid","emailValid","contentValid","success","Form","Row","Group","as","Col","Label","Control","placeholder","onChange","onFirstnameChange","onSurnameChange","onEmailChange","rows","onContentChange","type","handleSubmit","disabled","Component","defaultProps","modalContent","modalShow","handleClose","Date","getFullYear","handleShow","size","show","onHide","darkMode","faMoon","faSun","effect","randomNumber","min","max","Math","floor","random","fixColourCode","code","randomMatix","n","matrix","nNodes","i","push","j","buildGraphFromMatrix","weighted","newestPos","graphElements","data","label","parent","position","source","createStep","visNodes","trvEdges","curNode","curEdge","codeSec","logMsg","prev","weights","path","visitedNodes","slice","traversedEdges","currentNode","currentEdge","codeSection","logMessage","nodeWeights","parseCodeSections","lines","split","sections","sectNum","inSection","multiLines","match","highlightGraph","step","styles","rs","getComputedStyle","document","querySelector","visited","getPropertyValue","substring","current","selector","style","borderColor","borderWidth","fontWeight","lineColor","width","extractMin","queue","dist","u","v","genPathEdgeStles","directed","colour","colourStr","pathVertices","flattenMatrix","flatMatrix","parse","edges","indexOf","convertPrev","filter","x","guide","Accordion","Item","eventKey","src","addingNodes","alt","removingNodes","addingRemovingEdges","display","faWeightHanging","updatingWeight","defaultMatrixSize","faMapMarkerAlt","faSearch","ensureInteger","CreateTools","error","maxNodes","setFunc","ignoreCheck","numNodes","newValue","invalidRandNodeError","invalidNodeError","setUpdated","updateMatrix","selectPreset","presets","currentPreset","map","Dropdown","updatePreset","active","dest","updateSource","updateDest","weight","setWeight","Toggle","faCaretDown","Menu","renderPresetItems","genRandomMatix","faDice","FormControl","onChangeInput","InputGroup","faSync","readOnly","algInfo","algorithm","name","description","md","MarkdownIt","dangerouslySetInnerHTML","__html","render","AlgorithmSelector","items","currentAlgorithm","selectAlgorithm","item","algorithms","algorithmObj","setDirected","renderItems","faInfo","controlId","Check","checked","notDirectional","playback","curSpeed","setCurSpeed","playing","setPlaying","currentStep","nSteps","stepForward","stepBack","generateSteps","updatedSincePlay","setUpdatedSincePlay","runAnimation","faCaretLeft","faCaretRight","speeds","parseFloat","toFixed","s","changeTab","tabName","evt","tabcontent","getElementsByClassName","tablinks","getElementById","currentTarget","codeViewer","codeSecNum","useState","expanded","setExpanded","log","parsedCode","logMessages","msg","service","renderLog","reverse","sec","Cytoscape","use","coseBilkent","graph","updated","setSourceSelected","setTargetSelected","addNode","removeNode","initialised","setInitialised","addEdge","removeEdge","updateWeight","animationStyles","edgeWeights","pathStyles","sourceSelected","targetSelected","deleteGraphStyle","graphStyles","splice","addGraphStyle","sourceColour","destColour","selectedColour","targetArrowShape","curveStyle","nodeId","Infinity","elements","layout","graphLayout","stylesheet","cy","makeLayout","run","fromJson","on","edge","group","unselect","node","legend","legends","legendDicts","color","pseudocode","steps","Array","fill","explored","traversed","dontSkipQueue","parseInt","shift","seq","pathHighlight","GraphBuilder","directedMatrix","undirectedMatrix","sourceNode","destNode","newestNodePos","graphInitialised","speed","initialise","setTimeout","changeStep","resetSteps","m","pos","vertex","weightValue","typeStr","message","prevStyles","updateSourceDest","changePreset","changeAlgorithm","App","ReactDOM","StrictMode","module","exports","invalidNodeValue","backgroundColor","backgroundOpacity","height","textValign","fontSize","textRotation","textOutlineOpacity","textOutlineColor","textOutlineWidth","textMarginY","targetArrowColor","textHalign","padding","shape","idealEdgeLength","nodeRepulsion"],"mappings":"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","file":"static/js/main.0cafd578.chunk.js","sourcesContent":["import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub, faLinkedin } from '@fortawesome/free-brands-svg-icons';\nimport { faAt } from '@fortawesome/free-solid-svg-icons';\nimport config from '../constant/config';\nimport './About.css';\n\nconst about = (props) => (\n  <div id=\"about\">\n    <Modal.Header closeButton>\n      <span className=\"heading\">\n        Algorithm Animator\n      </span>\n    </Modal.Header>\n    <Modal.Body>\n      <div className=\"section\" id=\"project\">\n        <span className=\"title\">University Project</span>\n        This project was completed as a Level 4 Individual Project which is a course\n        at the University of Glasgow which all Computer Science and Software Engineering\n        students are required to take in their 4th year of studies.\n      </div>\n      <div className=\"section\" id=\"motivation\">\n        <span className=\"title\">Motivation</span>\n        The motivation behind this website is help people who are in the process of\n        learning algorithms. The website will help students as it allows them to\n        animate and walk through the algorithm visually which often can make it easier\n        to learn and to gain a better understanding of a particular algorithm.\n      </div>\n      <div className=\"section\" id=\"contribute\">\n        <span className=\"title\">Contribute</span>\n        Since the website is an open source project, any can contribute to the codebase.\n        If you&apos;d like to contribute you can head to the source code linked below, if you\n        think an alogirithm is missing or want to fix a bug (or even just report them)\n        then you can check out the repository on GitHub!\n        <br />\n        <a\n          className=\"link\"\n          href={config.sourceCode}\n          target=\"__blank\"\n          rel=\"noopener noreferrer\"\n          id=\"sourceCode\"\n        >\n          Algorithm Animator Repository\n        </a>\n      </div>\n      <div className=\"section\" id=\"developer\">\n        <span className=\"title\">Developer</span>\n        My name is Luke Holland and I&apos;m a 4th year student at the University\n        of Glasgow studying towards an BSc in Software Engineering.\n        <div className=\"socials\">\n          <a\n            className=\"plainLink\"\n            href={config.developerUrl}\n            target=\"__blank\"\n            rel=\"noopener noreferrer\"\n            id=\"github\"\n          >\n            <FontAwesomeIcon icon={faGithub} />\n          </a>\n          <a\n            className=\"plainLink\"\n            href={config.linkedin}\n            target=\"__blank\"\n            rel=\"noopener noreferrer\"\n            id=\"linkedin\"\n          >\n            <FontAwesomeIcon icon={faLinkedin} />\n          </a>\n          <a\n            className=\"plainLink\"\n            href={config.developerWebsite}\n            target=\"__blank\"\n            rel=\"noopener noreferrer\"\n            id=\"website\"\n          >\n            <FontAwesomeIcon icon={faAt} />\n          </a>\n        </div>\n      </div>\n    </Modal.Body>\n    <Modal.Footer>\n      <Button\n        id=\"closeButton\"\n        className=\"button\"\n        onClick={() => props.onClose()}\n      >\n        Close\n      </Button>\n    </Modal.Footer>\n  </div>\n);\n\nexport default about;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport config from '../constant/config';\nimport './Contact.css';\n\nconst emailRegex = new RegExp('^(([^<>()[\\\\]\\\\.,;:\\\\s@\\\\\"]+(\\\\.[^<>()[\\\\]\\\\.,;:\\\\s@\\\\\"]+)*)|(\\\\\".+\\\\\"))@(([^<>()[\\\\]\\\\.,;:\\\\s@\\\\\"]+\\\\.)+[^<>()[\\\\]\\\\.,;:\\\\s@\\\\\"]{2,})$', 'i');\nconst validateFirstname = (firstname) => firstname.length >= config.firstnameChars;\nconst validateSurname = (surname) => surname.length >= config.surnameChars;\nconst validateEmail = (email) => emailRegex.test(email);\nconst validateContent = (content) => content.length >= config.contentChars;\n\nconst postForm = async (firstname, surname, email, content) => {\n  const requestOptions = {\n    method: 'POST',\n    headers: { Accept: 'application/json' },\n    body: JSON.stringify({\n      firstname,\n      surname,\n      email,\n      content,\n    }),\n  };\n  const resp = await fetch(config.formspreeEndpoint, requestOptions)\n    .then((response) => response.json());\n  return resp.ok;\n};\n\nconst minMessages = (limit) => config.minCharMessage.replace('{min}', limit);\n\nclass Contact extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstname: '',\n      firstnameMessage: '',\n      surname: '',\n      surnameMessage: '',\n      email: '',\n      emailMessage: '',\n      content: '',\n      contentMessage: '',\n      submitMessage: '',\n      failedPost: false,\n      posted: false,\n      loading: false,\n      customCallback: props.customCallback,\n    };\n  }\n\n  async handleSubmit(e, firstname, surname, email, content) {\n    e.preventDefault();\n    const { customCallback } = this.state;\n    this.setState({ loading: true });\n    if (this.validateForm(firstname, surname, email, content)) {\n      let formPosted = true;\n      if (!customCallback) {\n        formPosted = await postForm(firstname, surname, email, content);\n      } else {\n        customCallback();\n      }\n      this.setState({\n        submitMessage: formPosted ? config.contactFormSuccess : config.contactFormFailure,\n        emailMessage: '',\n        contentMessage: '',\n        failedPost: false,\n        posted: true,\n      });\n    } else {\n      this.setState({ submitMessage: config.contactFormError });\n    }\n    this.setState({ loading: false });\n  }\n\n  onFirstnameChange(value) {\n    const firstnameValid = validateFirstname(value);\n    this.setState({\n      firstname: value,\n      firstnameMessage: !firstnameValid ? minMessages(config.firstnameChars) : '',\n      submitMessage: !firstnameValid ? config.contactFormError : '',\n    });\n  }\n\n  onSurnameChange(value) {\n    const surnameValid = validateSurname(value);\n    this.setState({\n      surname: value,\n      surnameMessage: !surnameValid ? minMessages(config.surnameChars) : '',\n      submitMessage: !surnameValid ? config.contactFormError : '',\n    });\n  }\n\n  onEmailChange(value) {\n    const emailValid = validateEmail(value);\n    this.setState({\n      email: value,\n      emailMessage: !emailValid ? config.emailMessage : '',\n      submitMessage: !emailValid ? config.contactFormError : '',\n    });\n  }\n\n  onContentChange(value) {\n    const contentValid = validateContent(value);\n    this.setState({\n      content: value,\n      contentMessage: !contentValid ? minMessages(config.contentChars) : '',\n      submitMessage: !contentValid ? config.contactFormError : '',\n    });\n  }\n\n  validateForm(firstname, surname, email, content) {\n    const firstnameValid = validateFirstname(firstname);\n    const surnameValid = validateSurname(surname);\n    const emailValid = validateEmail(email);\n    const contentValid = validateContent(content);\n    this.setState({\n      firstnameMessage: !firstnameValid ? minMessages(config.firstnameChars) : '',\n      surnameMessage: !surnameValid ? minMessages(config.surnameChars) : '',\n      emailMessage: !emailValid ? config.emailMessage : '',\n      contentMessage: !contentValid ? minMessages(config.contentChars) : '',\n    });\n    return emailValid && contentValid;\n  }\n\n  render() {\n    const {\n      firstname,\n      firstnameMessage,\n      surname,\n      surnameMessage,\n      email,\n      emailMessage,\n      content,\n      contentMessage,\n      submitMessage,\n      failedPost,\n      posted,\n      loading,\n    } = this.state;\n\n    const { onClose } = this.props;\n\n    const success = !(firstnameMessage || surnameMessage || emailMessage || contentMessage);\n\n    return (\n      <div id=\"contact\">\n        <Modal.Header closeButton>\n          <span className=\"heading\">\n            Contact\n          </span>\n        </Modal.Header>\n        <Modal.Body>\n          <span className=\"info\">\n            Use the form below to send me an message, this can be anything about the website\n            a suggestion, bug report or anything else you can think of.\n          </span>\n          <Form>\n            <Row className=\"mb-3\">\n              <Form.Group as={Col}>\n                <Form.Label>First name</Form.Label>\n                <Form.Control\n                  id=\"firstname\"\n                  placeholder=\"First name\"\n                  onChange={(e) => this.onFirstnameChange(e.target.value)}\n                />\n                <span id=\"firstnameError\" className=\"error\">{ firstnameMessage }</span>\n              </Form.Group>\n              <Form.Group as={Col}>\n                <Form.Label>Surname</Form.Label>\n                <Form.Control\n                  id=\"surname\"\n                  placeholder=\"Surname\"\n                  onChange={(e) => this.onSurnameChange(e.target.value)}\n                />\n                <span id=\"surnameError\" className=\"error\">{ surnameMessage }</span>\n              </Form.Group>\n            </Row>\n            <Form.Group className=\"mb-3\">\n              <Form.Label>Email address</Form.Label>\n              <Form.Control\n                id=\"email\"\n                placeholder=\"name@example.com\"\n                onChange={(e) => this.onEmailChange(e.target.value)}\n              />\n              <span id=\"emailError\" className=\"error\">{ emailMessage }</span>\n            </Form.Group>\n            <Form.Group className=\"mb-3\">\n              <Form.Label>Message</Form.Label>\n              <Form.Control\n                id=\"content\"\n                as=\"textarea\"\n                rows={3}\n                placeholder=\"Enter message here...\"\n                onChange={(e) => this.onContentChange(e.target.value)}\n              />\n              <span id=\"contentError\" className=\"error\">{ contentMessage }</span>\n            </Form.Group>\n            <div className=\"submit-container\">\n              { (!posted && !loading) && (\n                <Button\n                  id=\"submit\"\n                  className=\"button submit\"\n                  type=\"submit\"\n                  onClick={(e) => this.handleSubmit(e, firstname, surname, email, content)}\n                >\n                  Submit\n                </Button>\n              )}\n              { (posted || loading) && (\n                <Button\n                  id=\"submit\"\n                  className=\"button submit\"\n                  type=\"submit\"\n                  disabled\n                >\n                  { loading ? 'Loading...' : 'Submitted' }\n                </Button>\n              )}\n              <div id=\"status\" className=\"statusMessage\">\n                <span className={success && !failedPost ? 'success' : 'error'}>{ submitMessage }</span>\n              </div>\n            </div>\n          </Form>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            id=\"closeButton\"\n            className=\"button\"\n            onClick={() => onClose()}\n          >\n            Close\n          </Button>\n        </Modal.Footer>\n      </div>\n    );\n  }\n}\n\nContact.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  customCallback: PropTypes.func,\n};\n\nContact.defaultProps = {\n  customCallback: null,\n};\n\nexport default Contact;\n","import React, { Component } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport About from './About';\nimport Contact from './Contact';\nimport config from '../constant/config';\nimport './Footer.css';\n\nclass Footer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalContent: '',\n      modalShow: false,\n    };\n  }\n\n  handleClose() {\n    this.setState({ modalShow: false });\n  }\n\n  handleShow(content) {\n    let modalContent;\n    if (content === 'about') {\n      modalContent = <About onClose={() => this.handleClose()} />;\n    } else if (content === 'contact') {\n      modalContent = <Contact onClose={() => this.handleClose()} />;\n    }\n    this.setState({\n      modalShow: true,\n      modalContent,\n    });\n  }\n\n  render() {\n    const { modalShow, modalContent } = this.state;\n    return (\n      <div className=\"footer\" id=\"footer\">\n        <a\n          className=\"developer\"\n          href={config.developerWebsite}\n          target=\"__blank\"\n          rel=\"noopener noreferrer\"\n          id=\"developer\"\n        >\n          Luke Holland\n        </a>\n        { ' ' }\n        <span className=\"year\" id=\"year\">\n          2021-\n          { new Date().getFullYear() }\n        </span>\n        { ' ' }\n        <button\n          type=\"button\"\n          className=\"link\"\n          onClick={() => this.handleShow('about')}\n        >\n          About\n        </button>\n        { ' ' }\n        <button\n          type=\"button\"\n          className=\"link\"\n          onClick={() => this.handleShow('contact')}\n        >\n          Contact\n        </button>\n        { ' ' }\n        <a\n          className=\"link\"\n          href={config.sourceCode}\n          target=\"__blank\"\n          rel=\"noopener noreferrer\"\n          id=\"sourceCode\"\n        >\n          Source Code\n        </a>\n        <Modal\n          size=\"lg\"\n          show={modalShow}\n          onHide={() => this.handleClose()}\n        >\n          { modalContent }\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMoon, faSun } from '@fortawesome/free-solid-svg-icons';\nimport ReactTooltip from 'react-tooltip';\nimport Modal from 'react-bootstrap/Modal';\nimport About from './About';\nimport Contact from './Contact';\nimport config from '../constant/config';\nimport './Header.css';\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      darkMode: false,\n      modalContent: '',\n      modalShow: false,\n    };\n  }\n\n  handleClose() {\n    this.setState({ modalShow: false });\n  }\n\n  handleShow(content) {\n    let modalContent;\n    if (content === 'about') {\n      modalContent = <About onClose={() => this.handleClose()} />;\n    } else if (content === 'contact') {\n      modalContent = <Contact onClose={() => this.handleClose()} />;\n    }\n    this.setState({\n      modalShow: true,\n      modalContent,\n    });\n  }\n\n  render() {\n    const { darkMode, modalShow, modalContent } = this.state;\n    return (\n      <div className=\"header\" id=\"header\">\n        <span className=\"title\">Algorithm Animator</span>\n        <button\n          type=\"button\"\n          className=\"link\"\n          onClick={() => this.handleShow('about')}\n          id=\"aboutButton\"\n        >\n          About\n        </button>\n        <button\n          type=\"button\"\n          className=\"link\"\n          onClick={() => this.handleShow('contact')}\n          id=\"contactButton\"\n        >\n          Contact\n        </button>\n        <a\n          className=\"link\"\n          href={config.sourceCode}\n          target=\"__blank\"\n          rel=\"noopener noreferrer\"\n          id=\"sourceCode\"\n        >\n          Source\n        </a>\n        <span data-tip data-for=\"notFunctional\" className=\"mode-icons\">\n          <FontAwesomeIcon\n            className={darkMode ? 'selected icon' : 'icon'}\n            icon={faMoon}\n            onClick={() => this.setState({ darkMode: true })}\n            id=\"darkModeBtn\"\n          />\n          <FontAwesomeIcon\n            className={darkMode ? 'icon' : 'selected icon'}\n            icon={faSun}\n            onClick={() => this.setState({ darkMode: false })}\n            id=\"lightModeBtn\"\n          />\n        </span>\n        <ReactTooltip id=\"notFunctional\" effect=\"solid\">\n          Feature in development\n        </ReactTooltip>\n        <div id=\"modal\">\n          <Modal\n            size=\"lg\"\n            show={modalShow}\n            onHide={() => this.handleClose()}\n          >\n            { modalContent }\n          </Modal>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","export function randomNumber(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\n// fix issues where the # sign isn't there\nexport function fixColourCode(code) {\n  if (code[0] !== '#') {\n    return `#${code}`;\n  }\n  return code;\n}\n\nexport function randomMatix(n = -1) {\n  const matrix = [];\n  let nNodes = n;\n  if (nNodes === -1) {\n    nNodes = randomNumber(4, 15);\n  }\n  for (let i = 0; i < nNodes; i += 1) {\n    matrix.push([]);\n    for (let j = 0; j < nNodes; j += 1) {\n      if (i !== j) {\n        // 66% chance of edge\n        matrix[i].push(randomNumber(0, 3) % 2);\n      } else {\n        matrix[i].push(0);\n      }\n    }\n  }\n  return matrix;\n}\n\nexport function buildGraphFromMatrix(matrix, weighted = false, newestPos = null) {\n  const graphElements = [];\n  // add nodes to the graph\n  for (let i = 0; i < matrix.length; i += 1) {\n    if (i !== matrix.length - 1) {\n      graphElements.push({\n        data: {\n          id: `${i}`,\n          label: `${i}`,\n          parent: `${i}p`,\n        },\n      }, {\n        data: {\n          id: `${i}p`,\n          label: '',\n        },\n      });\n    } else {\n      graphElements.push({\n        data: {\n          id: `${i}`,\n          label: `${i}`,\n          parent: `${i}p`,\n        },\n        position: newestPos,\n      },\n      {\n        data: {\n          id: `${i}p`,\n          label: '',\n        },\n      });\n    }\n  }\n  // add edges to the graph\n  for (let i = 0; i < matrix.length; i += 1) {\n    for (let j = 0; j < matrix[i].length; j += 1) {\n      if (matrix[i][j] >= 1) {\n        graphElements.push({\n          data: {\n            id: `${i} ${j}`,\n            source: `${i}`,\n            target: `${j}`,\n            label: weighted ? matrix[i][j] : '',\n          },\n        });\n      }\n    }\n  }\n  return graphElements;\n}\n\nexport function createStep(\n  visNodes,\n  trvEdges,\n  curNode,\n  curEdge,\n  codeSec,\n  logMsg,\n  prev,\n  weights = [],\n  path = [],\n) {\n  return {\n    visitedNodes: visNodes.slice(),\n    traversedEdges: trvEdges.slice(),\n    currentNode: curNode,\n    currentEdge: curEdge,\n    codeSection: codeSec,\n    logMessage: logMsg,\n    nodeWeights: weights.slice(),\n    path: path.slice(),\n    prev: prev.slice(),\n  };\n}\n\nexport function parseCodeSections(code) {\n  const lines = code.split(/\\n/);\n  const sections = []; // array of objects; sectNum: int, code: string\n  let sectNum = -1;\n  let inSection = false;\n  let multiLines = '';\n  for (let i = 0; i < lines.length; i += 1) {\n    // start of section\n    if (lines[i].match(/{{\\d}}/)) {\n      // increment sectNum\n      sectNum += 1;\n      inSection = true;\n    // end of section\n    } else if (lines[i].match(/{{\\/\\d}}/)) {\n      // add multiline to the sections array\n      sections.push({ sectNum, code: multiLines });\n      multiLines = '';\n      inSection = false;\n    // inside of section so add to multiline\n    } else if (inSection) {\n      // if theres already content then append line prefixed with newline\n      multiLines = multiLines ? `${multiLines}${lines[i]}\\n` : `${lines[i]}\\n`;\n    // not currently inside of section\n    } else {\n      sections.push({ sectNum: -1, code: `${lines[i]}\\n` });\n    }\n  }\n  return sections;\n}\n\nexport function highlightGraph(step) {\n  const styles = []; // array to store the new edge and node styles\n  const rs = getComputedStyle(document.querySelector(':root'));\n  const visited = fixColourCode(rs.getPropertyValue('--color-visited').substring(1));\n  const current = fixColourCode(rs.getPropertyValue('--color-current').substring(1));\n  // add node styles\n  for (let i = 0; i < step.visitedNodes.length; i += 1) {\n    if (step.visitedNodes[i]) {\n      styles.push({\n        selector: `node[id = '${i}']`,\n        style: {\n          borderColor: visited,\n          borderWidth: 1,\n        },\n      });\n    }\n  }\n  if (step.currentNode !== '') {\n    styles.push({\n      selector: `node[id = '${step.currentNode}']`,\n      style: {\n        borderColor: current,\n        fontWeight: 'bold',\n        borderWidth: 2,\n      },\n    });\n  }\n  // add edge styles\n  for (let i = 0; i < step.traversedEdges.length; i += 1) {\n    if (step.traversedEdges[i]) {\n      styles.push({\n        selector: `edge[id = '${step.traversedEdges[i]}']`,\n        style: {\n          lineColor: visited,\n        },\n      });\n    }\n  }\n  if (step.currentEdge !== '') {\n    styles.push({\n      selector: `edge[id = '${step.currentEdge}']`,\n      style: {\n        lineColor: current,\n        width: 3,\n      },\n    });\n  }\n  return styles;\n}\n\nexport function extractMin(queue, dist) {\n  let u = queue[0];\n  let min = dist[u];\n  for (let i = 0; i < queue.length; i += 1) {\n    const v = queue[i];\n    if (dist[v] < min) {\n      u = v;\n      min = dist[v];\n    }\n  }\n  return u;\n}\n\nexport function genPathEdgeStles(path, directed, colour = '--color-path', width = 3) {\n  const styles = [];\n  const rs = getComputedStyle(document.querySelector(':root'));\n  const colourStr = fixColourCode(rs.getPropertyValue(colour).substring(1));\n  if (path.length > 0) {\n    for (let i = 0; i < path.length; i += 1) {\n      const pathVertices = path[i].split(' ');\n      styles.push({\n        selector: `edge[id = '${path[i]}']`,\n        style: {\n          lineColor: colourStr,\n          width,\n        },\n      });\n      if (!directed) {\n        styles.push({\n          selector: `edge[id = '${pathVertices[1]} ${pathVertices[0]}']`,\n          style: {\n            lineColor: colourStr,\n            width,\n          },\n        });\n      }\n    }\n  }\n  return styles;\n}\n\nexport function flattenMatrix(matrix) {\n  const flatMatrix = JSON.parse(JSON.stringify(matrix)); // copy of matrix\n  const edges = []; // list of edges\n  for (let i = 0; i < flatMatrix.length; i += 1) {\n    for (let j = 0; j < flatMatrix[i].length; j += 1) {\n      if (flatMatrix[i][j] > 0) { // edge exists\n        if (edges.indexOf(`${j} ${i}`) !== -1) {\n          flatMatrix[i][j] = 0;\n        } else {\n          edges.push(`${i} ${j}`);\n        }\n      }\n    }\n  }\n  return flatMatrix;\n}\n\nexport function convertPrev(prev, directed) {\n  const edges = [];\n  if (prev.filter((x) => x !== null).length > 0) {\n    for (let v = 0; v < prev.length; v += 1) {\n      if (prev[v] !== null) {\n        edges.push(`${prev[v]} ${v}`);\n        if (!directed) {\n          edges.push(`${v} ${prev[v]}`);\n        }\n      }\n    }\n  }\n  return edges;\n}\n\nexport default {\n  randomNumber,\n  randomMatix,\n  buildGraphFromMatrix,\n  createStep,\n  parseCodeSections,\n  highlightGraph,\n  extractMin,\n  genPathEdgeStles,\n  flattenMatrix,\n  convertPrev,\n  fixColourCode,\n};\n","export default __webpack_public_path__ + \"static/media/adding_nodes.ef91f7ed.gif\";","export default __webpack_public_path__ + \"static/media/removing_nodes.bf220aab.gif\";","export default __webpack_public_path__ + \"static/media/adding_removing_edges.d1f2f267.gif\";","export default __webpack_public_path__ + \"static/media/updating_edge_weight.a47a4dd2.gif\";","import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faWeightHanging, faMapMarkerAlt, faSearch } from '@fortawesome/free-solid-svg-icons';\nimport addingNodes from '../assets/adding_nodes.gif';\nimport removingNodes from '../assets/removing_nodes.gif';\nimport addingRemovingEdges from '../assets/adding_removing_edges.gif';\nimport updatingWeight from '../assets/updating_edge_weight.gif';\nimport config from '../constant/config';\nimport './Guide.css';\n\nconst guide = (props) => (\n  <div id=\"guide\" className=\"guide\">\n    <Modal.Header closeButton>\n      Guide\n    </Modal.Header>\n    <Modal.Body>\n      <p>\n        Below are some snippets which explain\n        how to use the website and its different features.\n      </p>\n      <Accordion>\n        <Accordion.Item eventKey=\"0\">\n          <Accordion.Header>Interacting with the graph</Accordion.Header>\n          <Accordion.Body>\n            <p>\n              This section will show you all the ways\n              you can interact with the graph!\n            </p>\n\n            <b>Adding nodes to the graph</b>\n            <p>Double click on any empty space on the graph to add a node.</p>\n\n            <img src={addingNodes} alt=\"Example of adding nodes to graph as a gif.\" />\n\n            <b>Removing nodes from the graph</b>\n            <p>Click and hold on any node to remove it from the graph.</p>\n\n            <img src={removingNodes} alt=\"Example of removing nodes from a graph as a gif.\" />\n\n            <b>Adding edges between nodes</b>\n            <p>Click on one node to select as a source, then another as the target.</p>\n\n            <img src={addingRemovingEdges} alt=\"Example of adding and removing edges from a graph as a gif.\" />\n            <span style={{ display: 'block' }}>* shows adding and removing edges</span>\n\n            <b>Removing an edge between nodes</b>\n            <p>Click and hold on any edge to remove it form the graph</p>\n\n            <b>Updating the weight of an edge</b>\n            <p>\n              For a weighted algorithm, choose the value in the top left\n              { ' ' }\n              <FontAwesomeIcon\n                icon={faWeightHanging}\n                className=\"icon\"\n              />\n              { ' ' }\n              field then double click on an edge.\n            </p>\n\n            <img src={updatingWeight} alt=\"Example of updating edge weight on graph as a gif.\" />\n          </Accordion.Body>\n        </Accordion.Item>\n        <Accordion.Item eventKey=\"1\">\n          <Accordion.Header>Graph tools</Accordion.Header>\n          <Accordion.Body>\n            <p>\n              This section will show you what each of the buttons\n              that live on the left above the graph do.\n            </p>\n\n            <b>The guide button</b>\n            <p>\n              This button will open up a pop-up which shows the user how\n              to use different aspects of the website.\n            </p>\n\n            <b>Presets dropdown</b>\n            <p>\n              This dropdown provides you with some presets that are specifically\n              designed for the algorithm, these could be for educational purposes\n              or some might even just be cool graph designs.\n            </p>\n\n            <b>Random graph button</b>\n            <p>\n              This button is used to generate a random graph button it uses the input\n              to its right to know how large of a graph to generate. If the input is\n              left empty then the default matrix size of\n              { ' ' }\n              {config.defaultMatrixSize}\n              { ' ' }\n              is used.\n            </p>\n\n            <b>Random graph size input</b>\n            <p>\n              This input is used to support the random matrix button, it&apos;ll tell it\n              how large of a matrix to generate. If left empty it defaults to\n              { ' ' }\n              {config.defaultMatrixSize}\n              { ' ' }\n              and has no maximum. (large graphs WILL have performance penalties)\n            </p>\n\n            <b>Source input</b>\n            <p>\n              This\n              { ' ' }\n              <FontAwesomeIcon\n                icon={faMapMarkerAlt}\n                className=\"icon\"\n              />\n              { ' ' }\n              input is used to specify what source node is used for the\n              algorithms when you run them. The node will be highlighted according to\n              the legend colour for &apos;Source&apos;.\n            </p>\n\n            <b>Target input</b>\n            <p>\n              This\n              { ' ' }\n              <FontAwesomeIcon\n                icon={faSearch}\n                className=\"icon\"\n              />\n              { ' ' }\n              input is used to specify what target node is used for the\n              algorithms when you run them. The node will be highlighted according to\n              the legend colour for &apos;Target&apos;. (this is generall the node\n              you are searching for in the algorithm)\n            </p>\n\n            <b>Refresh layout button</b>\n            <p>\n              This button is used to re-run the layout algorithm which is responsible\n              for choosing where to put each of the nodes in the graph such that it\n              looks nice and is legible. You can use this graph if you have created\n              a graph or modified one and want to re-arrange it to look better.\n            </p>\n\n            <b>Weight input</b>\n            <p>\n              This\n              { ' ' }\n              <FontAwesomeIcon\n                icon={faWeightHanging}\n                className=\"icon\"\n              />\n              { ' ' }\n              input is used when giving a updating a weight value of an edge,\n              you would type in a value into the box (any positive integer &gt; 0)\n              and then the edge you create or double click will be given this value.\n            </p>\n          </Accordion.Body>\n        </Accordion.Item>\n        <Accordion.Item eventKey=\"2\">\n          <Accordion.Header>Playback controls</Accordion.Header>\n          <Accordion.Body>\n            <p>\n              This section will show you what each of the buttons\n              that live on the right above the graph do.\n            </p>\n\n            <b>Step backwards button</b>\n            <p>\n              This button can be used once you have pressed play and started the\n              animation of an algorithm, it allows you to precisely step backwards\n              by 1 step. This can be used to help better understand the algorithm by\n              seeing each line of code being executed step by step.\n            </p>\n\n            <b>Play / pause button</b>\n            <p>\n              Once you click this button it&apos;ll begin the animation of your graph.\n              This should be almost instant, however if you have a very large complex\n              graph it might take a few momements. Upon pressing the play the algorithm begins\n              and the button morphs into a pause button. When pressed again it&apos;ll stop the\n              animation - but can be resumed by pressing play once more.\n            </p>\n\n            <b>Step forwards button</b>\n            <p>\n              This button can be used once you have pressed play and started the\n              animation of an algorithm, it allows you to precisely step forwards\n              by 1 step. This can be used to help better understand the algorithm by\n              seeing each line of code being executed step by step.\n            </p>\n\n            <b>Speed slider</b>\n            <p>\n              The slider can be used to increase or decrease the speed at which\n              the algorithm is running. Sliding towards the right will increase the\n              speed and then to the left will decrease the speed.\n            </p>\n\n            <b>Speed dropdown</b>\n            <p>\n              This dropdown is linked to the slider and might be an easier way for\n              you to choose a precise speed setting.\n            </p>\n          </Accordion.Body>\n        </Accordion.Item>\n        <Accordion.Item eventKey=\"3\">\n          <Accordion.Header>Code viewer & logger</Accordion.Header>\n          <Accordion.Body>\n            <p>\n              This section will show you what the box that lives inside\n              of the graph is for and what the tabs mean.\n            </p>\n\n            <b>Pseudo tab</b>\n            <p>\n              This tab is for showing the pseudocode of an algorithm, while it is running\n              an animation the block of code which is currently being executed in the animation\n              is highlighted in red so you can see exactly what code is being run.\n            </p>\n\n            <b>Logging (Log) tab</b>\n            <p>\n              This tab is for printing out the logger messages which can let you as a user see\n              exactly what is going on when the website is running. The logger will tell you what\n              each step of the animation is in English. Additionally any user action - adding nodes,\n              removing edges, etc. - will also be logged to the logger. This can be used to keep\n              track of what you have done and what the algorithm is doing.\n            </p>\n          </Accordion.Body>\n        </Accordion.Item>\n      </Accordion>\n    </Modal.Body>\n    <Modal.Footer>\n      <Button\n        id=\"closeButton\"\n        className=\"button\"\n        onClick={() => props.onClose()}\n      >\n        Close\n      </Button>\n    </Modal.Footer>\n  </div>\n);\n\nexport default guide;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Modal from 'react-bootstrap/Modal';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faDice,\n  faMapMarkerAlt,\n  faSearch,\n  faCaretDown,\n  faSync,\n  faWeightHanging,\n} from '@fortawesome/free-solid-svg-icons';\nimport { randomMatix } from '../util/util';\nimport config from '../constant/config';\nimport './CreateTools.css';\nimport Guide from './Guide';\n\nconst ensureInteger = (v) => v.replace(/[^\\d]+/, '');\n\nclass CreateTools extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalShow: false,\n      error: '',\n      maxNodes: null,\n    };\n  }\n\n  handleClose() {\n    this.setState({ modalShow: false });\n  }\n\n  handleShow() {\n    this.setState({ modalShow: true });\n  }\n\n  onChangeInput(value, setFunc, ignoreCheck = false) {\n    const { numNodes } = this.props;\n    const newValue = ensureInteger(value);\n    setFunc(newValue);\n    let error = '';\n    if (!ignoreCheck) {\n      error = newValue >= numNodes ? config.invalidNodeError.replace('{numNodes}', numNodes) : '';\n    } else {\n      error = newValue === 0 ? config.invalidRandNodeError : '';\n    }\n    this.setState({ error });\n  }\n\n  genRandomMatix() {\n    const { maxNodes } = this.state;\n    const { setUpdated, updateMatrix } = this.props;\n    let matrix;\n    if (maxNodes > 0) {\n      matrix = randomMatix(maxNodes);\n    } else {\n      matrix = randomMatix();\n    }\n    setUpdated();\n    updateMatrix(matrix);\n  }\n\n  updatePreset(i) {\n    const { setUpdated, selectPreset } = this.props;\n    setUpdated();\n    selectPreset(i);\n  }\n\n  renderPresetItems() {\n    const { presets, currentPreset } = this.props;\n    return presets.map((v, i) => (\n      <Dropdown.Item\n        className=\"selector-item\"\n        onClick={() => this.updatePreset(i)}\n        active={v === currentPreset}\n      >\n        {v}\n      </Dropdown.Item>\n    ));\n  }\n\n  render() {\n    const { maxNodes, error, modalShow } = this.state;\n    const {\n      source,\n      dest,\n      updateSource,\n      updateDest,\n      setUpdated,\n      weight,\n      weighted,\n      setWeight,\n    } = this.props;\n\n    return (\n      <div id=\"tools\" className=\"tools\">\n        <div id=\"topRow\" className=\"top-row\">\n          <Button\n            id=\"guide\"\n            className=\"button\"\n            onClick={() => this.handleShow()}\n          >\n            Guide\n          </Button>\n          <Dropdown>\n            <Dropdown.Toggle\n              className=\"dropdown-toggle presets\"\n            >\n              Presets\n              { ' ' }\n              <FontAwesomeIcon\n                icon={faCaretDown}\n                className=\"icon\"\n              />\n            </Dropdown.Toggle>\n            <Dropdown.Menu\n              className=\"dropdown-menu\"\n            >\n              { this.renderPresetItems() }\n            </Dropdown.Menu>\n          </Dropdown>\n          <Button\n            id=\"random\"\n            className=\"button\"\n            onClick={() => this.genRandomMatix()}\n          >\n            <FontAwesomeIcon\n              icon={faDice}\n            />\n          </Button>\n          <FormControl\n            id=\"nodeCount\"\n            placeholder=\"#nodes\"\n            className=\"input-w-text number-input num-nodes\"\n            value={maxNodes}\n            onChange={\n              (e) => this.onChangeInput(\n                e.target.value,\n                (v) => this.setState({ maxNodes: v }),\n                true,\n              )\n            }\n          />\n        </div>\n        <div id=\"bottomRow\" className=\"bottom-row\">\n          <div>\n            <InputGroup>\n              <div className=\"input-icon\">\n                <FontAwesomeIcon\n                  id=\"sourceIcon\"\n                  icon={faMapMarkerAlt}\n                  className=\"icon\"\n                />\n              </div>\n              <FormControl\n                id=\"start\"\n                className=\"input-w-text number-input start\"\n                value={source}\n                onChange={(e) => this.onChangeInput(e.target.value, updateSource)}\n              />\n            </InputGroup>\n          </div>\n          <div>\n            <InputGroup>\n              <div className=\"input-icon\">\n                <FontAwesomeIcon\n                  id=\"searchIcon\"\n                  icon={faSearch}\n                  className=\"icon\"\n                />\n              </div>\n              <FormControl\n                id=\"search\"\n                className=\"input-w-text number-input search\"\n                value={dest}\n                onChange={(e) => this.onChangeInput(e.target.value, updateDest)}\n              />\n            </InputGroup>\n          </div>\n          <div>\n            <Button\n              id=\"refresh\"\n              className=\"button refresh\"\n              onClick={() => setUpdated()}\n            >\n              <FontAwesomeIcon\n                icon={faSync}\n              />\n            </Button>\n          </div>\n          <div>\n            <InputGroup className={weighted ? '' : 'input-disabled'}>\n              <div className=\"input-icon\">\n                <FontAwesomeIcon\n                  id=\"weightIcon\"\n                  icon={faWeightHanging}\n                  className=\"icon\"\n                />\n              </div>\n              <FormControl\n                id=\"weight\"\n                className=\"input-w-text number-input weight\"\n                value={weight}\n                onChange={(e) => this.onChangeInput(e.target.value, setWeight, true)}\n                readOnly={!weighted}\n              />\n            </InputGroup>\n          </div>\n        </div>\n        <span className=\"error\">\n          { error }\n        </span>\n        <Modal\n          size=\"lg\"\n          show={modalShow}\n          onHide={() => this.handleClose()}\n        >\n          <Guide onClose={() => this.handleClose()} />\n        </Modal>\n      </div>\n    );\n  }\n}\n\nCreateTools.propTypes = {\n  updateMatrix: PropTypes.func,\n  updateSource: PropTypes.func,\n  updateDest: PropTypes.func,\n  setUpdated: PropTypes.func,\n  setWeight: PropTypes.func,\n  selectPreset: PropTypes.func,\n  presets: PropTypes.arrayOf(PropTypes.object),\n  numNodes: PropTypes.number,\n  source: PropTypes.number,\n  dest: PropTypes.number,\n  weight: PropTypes.number,\n  weighted: PropTypes.bool,\n  currentPreset: PropTypes.string,\n};\n\nCreateTools.defaultProps = {\n  updateMatrix: () => {},\n  updateSource: () => {},\n  updateDest: () => {},\n  setUpdated: () => {},\n  setWeight: () => {},\n  selectPreset: () => {},\n  presets: [],\n  numNodes: 0,\n  source: 0,\n  dest: 0,\n  weight: 1,\n  weighted: false,\n  currentPreset: '',\n};\n\nexport default CreateTools;\n","import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport MarkdownIt from 'markdown-it';\nimport './AlgInfo.css';\n\nconst algInfo = (props) => {\n  const { algorithm } = props;\n  const { name, description } = algorithm;\n  const md = new MarkdownIt();\n  return (\n    <div id=\"about\">\n      <Modal.Header closeButton>\n        { name }\n      </Modal.Header>\n      <Modal.Body>\n        {/* eslint-disable-next-line */}\n        <div dangerouslySetInnerHTML={{ __html: md.render(description) }} />\n      </Modal.Body>\n      <Modal.Footer>\n        <Button\n          id=\"closeButton\"\n          className=\"button\"\n          onClick={() => props.onClose()}\n        >\n          Close\n        </Button>\n      </Modal.Footer>\n    </div>\n  );\n};\n\nexport default algInfo;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport './AlgorithmSelector.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCaretDown, faInfo } from '@fortawesome/free-solid-svg-icons';\nimport AlgInfo from './AlgInfo';\n\nclass AlgorithmSelector extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalShow: false,\n    };\n  }\n\n  handleClose() {\n    this.setState({ modalShow: false });\n  }\n\n  handleShow() {\n    this.setState({ modalShow: true });\n  }\n\n  renderItems(items) {\n    const { currentAlgorithm, selectAlgorithm } = this.props;\n\n    return items.map((item, i) => (\n      <Dropdown.Item\n        className=\"selector-item\"\n        onClick={() => selectAlgorithm(i)}\n        active={item === currentAlgorithm}\n      >\n        { item }\n      </Dropdown.Item>\n    ));\n  }\n\n  render() {\n    const { modalShow } = this.state;\n    const {\n      currentAlgorithm,\n      algorithms,\n      algorithmObj,\n      directed,\n      setDirected,\n    } = this.props;\n\n    return (\n      <div id=\"algorithmSelector\" className=\"algorithm-selector\">\n        <Dropdown>\n          <Dropdown.Toggle\n            className=\"dropdown-toggle\"\n          >\n            { currentAlgorithm }\n            { ' ' }\n            <FontAwesomeIcon\n              icon={faCaretDown}\n              className=\"icon\"\n            />\n          </Dropdown.Toggle>\n          <Dropdown.Menu\n            className=\"dropdown-menu\"\n          >\n            { this.renderItems(algorithms) }\n          </Dropdown.Menu>\n        </Dropdown>\n        <Button\n          id=\"info\"\n          className=\"button\"\n          onClick={() => this.handleShow()}\n        >\n          <FontAwesomeIcon\n            icon={faInfo}\n          />\n        </Button>\n        <br />\n        <Form.Group\n          className=\"checkbox\"\n          controlId=\"formBasicCheckbox\"\n        >\n          <Form.Check\n            type=\"checkbox\"\n            label=\"directed\"\n            checked={directed}\n            disabled={algorithmObj.notDirectional}\n            onClick={() => setDirected(!directed)}\n          />\n        </Form.Group>\n        <Modal\n          size=\"lg\"\n          show={modalShow}\n          onHide={() => this.handleClose()}\n        >\n          <AlgInfo\n            algorithm={algorithmObj}\n            onClose={() => this.handleClose()}\n          />\n        </Modal>\n      </div>\n    );\n  }\n}\n\nAlgorithmSelector.propTypes = {\n  currentAlgorithm: PropTypes.string,\n  selectAlgorithm: PropTypes.func,\n  algorithms: PropTypes.arrayOf(PropTypes.object),\n  algorithmObj: PropTypes.objectOf(PropTypes.object),\n  directed: PropTypes.bool,\n  setDirected: PropTypes.func,\n};\n\nAlgorithmSelector.defaultProps = {\n  currentAlgorithm: '',\n  algorithms: [],\n  selectAlgorithm: () => {},\n  directed: false,\n  setDirected: () => {},\n  algorithmObj: null,\n};\n\nexport default AlgorithmSelector;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCaretRight, faCaretLeft, faCaretDown } from '@fortawesome/free-solid-svg-icons';\nimport config from '../constant/config';\nimport 'rc-slider/assets/index.css';\nimport './Playback.css';\n\nconst playback = (props) => {\n  const {\n    curSpeed,\n    setCurSpeed,\n    playing,\n    setPlaying,\n    currentStep,\n    nSteps,\n    stepForward,\n    stepBack,\n    generateSteps,\n    updatedSincePlay,\n    setUpdatedSincePlay,\n    runAnimation,\n  } = props;\n\n  const handlePlay = () => {\n    // need to regen the steps\n    if (updatedSincePlay) {\n      generateSteps();\n      // set to false\n      setUpdatedSincePlay(false);\n    }\n    setPlaying();\n    runAnimation(true);\n  };\n\n  const renderSpeedOptions = () => config.speeds.map((s) => (\n    <Dropdown.Item\n      onClick={() => setCurSpeed(s)}\n      active={s === curSpeed}\n    >\n      { s.toFixed(2) }\n      x\n    </Dropdown.Item>\n  ));\n\n  return (\n    <div id=\"playback\" className=\"playback\">\n      <Button\n        id=\"stepBack\"\n        className=\"button\"\n        disabled={currentStep === 0 || nSteps === 0}\n        onClick={() => stepBack()}\n      >\n        <FontAwesomeIcon\n          icon={faCaretLeft}\n        />\n        { ' ' }\n        step\n      </Button>\n      <Button\n        id=\"playPause\"\n        className=\"button\"\n        onClick={() => handlePlay()}\n        disabled={currentStep >= nSteps - 1 && !updatedSincePlay}\n      >\n        { playing ? 'pause' : 'play' }\n      </Button>\n      <Button\n        id=\"stepForward\"\n        className=\"button\"\n        disabled={currentStep >= nSteps - 1 || nSteps === 0}\n        onClick={() => stepForward()}\n      >\n        step\n        { ' ' }\n        <FontAwesomeIcon\n          icon={faCaretRight}\n        />\n      </Button>\n      <div id=\"speedControl\" className=\"speed-control\">\n        <input\n          type=\"range\"\n          min=\"0.1\"\n          max={`${Math.max(...config.speeds)}`}\n          step=\"0.1\"\n          value={curSpeed}\n          onChange={(e) => setCurSpeed(parseFloat(e.target.value))}\n        />\n        <Dropdown className=\"speed-dropdown\">\n          <Dropdown.Toggle className=\"speed-toggle-btn\">\n            { curSpeed.toFixed(2) }\n            { 'x ' }\n            <FontAwesomeIcon\n              icon={faCaretDown}\n            />\n          </Dropdown.Toggle>\n          <Dropdown.Menu className=\"speed-dropdown-menu\">\n            { renderSpeedOptions() }\n          </Dropdown.Menu>\n        </Dropdown>\n      </div>\n    </div>\n  );\n};\n\nplayback.defaultProps = {\n  curSpeed: 1.0,\n};\n\nexport default playback;\n","import React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCaretDown } from '@fortawesome/free-solid-svg-icons';\nimport { parseCodeSections } from '../util/util';\nimport './CodeViewer.css';\n\nconst renderCode = (sections, codeSecNum) => sections.map((sec) => (\n  <span className={sec.sectNum === codeSecNum ? 'highlighed' : ''}>\n    {sec.code}\n  </span>\n));\n\nconst renderLog = (log) => log.map((msg) => (\n  <span className=\"log-message\">\n    {`${msg.service} > ${msg.value}`}\n  </span>\n));\n\nconst changeTab = (e, tabName) => {\n  const evt = e;\n  // Get all elements with class='tabcontent' and hide them\n  const tabcontent = document.getElementsByClassName('tabcontent');\n  for (let i = 0; i < tabcontent.length; i += 1) {\n    tabcontent[i].style.display = 'none';\n  }\n\n  // Get all elements with class='tablinks' and remove the class 'active'\n  const tablinks = document.getElementsByClassName('tablinks');\n  for (let i = 0; i < tablinks.length; i += 1) {\n    tablinks[i].className = tablinks[i].className.replace(' active', '');\n  }\n\n  // Show the current tab, and add an 'active' class to the button that opened the tab\n  document.getElementById(tabName).style.display = 'block';\n  evt.currentTarget.className += ' active';\n};\n\nconst codeViewer = (props) => {\n  const [expanded, setExpanded] = useState(false);\n  const {\n    code,\n    codeSection,\n    log,\n  } = props;\n\n  const parsedCode = parseCodeSections(code);\n  const logMessages = log && log.length > 0 ? renderLog(log) : '';\n  if (log.length > 0) {\n    logMessages.reverse();\n  }\n\n  return (\n    <div className={expanded ? 'code-container-expanded expanded' : 'code-container'}>\n      <div className=\"tab\">\n        <button type=\"button\" className=\"tablinks active\" onClick={(e) => changeTab(e, 'pseudo')}>Pseudo</button>\n        <button type=\"button\" className=\"tablinks\" onClick={(e) => changeTab(e, 'log')}>Log</button>\n      </div>\n\n      <div id=\"pseudo\" className=\"tabcontent\">\n        <pre>\n          <code>\n            {renderCode(parsedCode, codeSection)}\n          </code>\n        </pre>\n      </div>\n\n      <div id=\"log\" className=\"tabcontent\">\n        <pre className=\"log\">\n          <code>\n            {logMessages.length > 0\n              ? logMessages\n              : 'Messages are logged here!'}\n          </code>\n        </pre>\n      </div>\n\n      <div className=\"toggle\">\n        <FontAwesomeIcon\n          icon={faCaretDown}\n          onClick={() => setExpanded(!expanded)}\n          className=\"code-icon\"\n        />\n      </div>\n    </div>\n  );\n};\n\ncodeViewer.defaultProps = {\n  code: '',\n  codeSection: -1,\n};\n\nexport default codeViewer;\n","import React from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport Cytoscape from 'cytoscape';\nimport coseBilkent from 'cytoscape-cose-bilkent';\nimport config from '../constant/config';\nimport { fixColourCode } from '../util/util';\nimport './Graph.css';\n\nCytoscape.use(coseBilkent);\n\nconst rs = getComputedStyle(document.querySelector(':root'));\n\nconst graph = (props) => {\n  const {\n    graphElements,\n    source,\n    dest,\n    updated,\n    setSourceSelected,\n    setTargetSelected,\n    setUpdated,\n    addNode,\n    removeNode,\n    initialised,\n    setInitialised,\n    addEdge,\n    removeEdge,\n    updateWeight,\n    directed,\n    animationStyles,\n    edgeWeights,\n    pathStyles,\n  } = props;\n\n  let {\n    sourceSelected,\n    targetSelected,\n  } = props;\n\n  const deleteGraphStyle = (i) => {\n    if (i !== -1) {\n      config.graphStyles.splice(i, 1);\n    }\n  };\n\n  const addGraphStyle = (id, colour, parent = false) => {\n    if (!parent) {\n      config.graphStyles.push({\n        selector: `node[id = '${id}']`,\n        style: {\n          borderColor: colour,\n          fontWeight: 'bold',\n        },\n      });\n    } else {\n      config.graphStyles.push({\n        selector: `node[id = '${id}p']`,\n        style: {\n          borderColor: colour,\n          borderWidth: 2,\n          fontWeight: 'bold',\n        },\n      });\n    }\n  };\n\n  const selectors = config.graphStyles.map((v) => v.selector);\n  for (let i = selectors.length - 1; i >= 3; i -= 1) {\n    deleteGraphStyle(i);\n  }\n\n  const sourceColour = fixColourCode(rs.getPropertyValue('--color-source').substring(1));\n  const destColour = fixColourCode(rs.getPropertyValue('--color-target').substring(1));\n  const selectedColour = fixColourCode(rs.getPropertyValue('--color-selected').substring(1));\n\n  addGraphStyle(source, sourceColour, true);\n  addGraphStyle(dest, destColour, true);\n  addGraphStyle(sourceSelected, selectedColour);\n  addGraphStyle(targetSelected, selectedColour);\n\n  // update the graph if directed or not for the graph edge style\n  if (directed && config.graphStyles.length > 1) {\n    config.graphStyles[1].style.targetArrowShape = 'triangle';\n    config.graphStyles[1].style.curveStyle = 'bezier';\n  } else {\n    config.graphStyles[1].style.targetArrowShape = 'none';\n    config.graphStyles[1].style.curveStyle = 'straight';\n  }\n\n  // add the animation styles\n  if (animationStyles) {\n    for (let i = 0; i < animationStyles.length; i += 1) {\n      config.graphStyles.push(animationStyles[i]);\n    }\n  }\n\n  // add the path animation styling\n  if (pathStyles) {\n    for (let i = 0; i < pathStyles.length; i += 1) {\n      config.graphStyles.push(pathStyles[i]);\n    }\n  }\n\n  // test updating weight\n  if (edgeWeights && edgeWeights.length > 0) {\n    for (let i = 0; i < graphElements.length; i += 1) {\n      if (graphElements[i].data.id.match(/^\\d+p$/)) {\n        const nodeId = graphElements[i].data.id.match(/^(\\d+)p$/)[1];\n        if (nodeId) {\n          if (edgeWeights[nodeId] === Infinity) {\n            graphElements[i].data.label = 'inf';\n          } else if (!edgeWeights[nodeId] && edgeWeights[nodeId] !== 0) {\n            graphElements[i].data.label = '';\n          } else {\n            graphElements[i].data.label = `${edgeWeights[nodeId]}`;\n          }\n        }\n      }\n    }\n  }\n\n  return (\n    <div className=\"graph-container\">\n      <CytoscapeComponent\n        elements={graphElements}\n        layout={config.graphLayout}\n        stylesheet={config.graphStyles}\n        className=\"graph\"\n        cy={(cy) => {\n          if (updated) {\n            const layout = cy.makeLayout(config.graphLayout);\n            layout.run();\n            setUpdated();\n          }\n\n          cy.style().fromJson(config.graphStyles);\n\n          if (!initialised) {\n            cy.on('dbltap', 'edge', (e) => {\n              const edge = e.target.json();\n              updateWeight(edge.data.id, edge.data.source, edge.data.target);\n            });\n\n            cy.on('dbltap', (e) => {\n              const { group } = e.target.json();\n              if (group !== 'edges' && group !== 'nodes') {\n                addNode(e.position);\n              }\n            });\n\n            cy.on('select', 'node', (e) => {\n              const id = e.target.id();\n              if (sourceSelected === id) {\n                sourceSelected = '';\n                setSourceSelected('');\n              } else if (targetSelected === id) {\n                targetSelected = '';\n                setTargetSelected('');\n              } else if (sourceSelected.length === 0) {\n                sourceSelected = id;\n                setSourceSelected(id);\n              } else if (targetSelected.length === 0) {\n                targetSelected = id;\n                setTargetSelected(id);\n              }\n              if (sourceSelected.length > 0 && targetSelected.length > 0) {\n                addEdge();\n                sourceSelected = '';\n                targetSelected = '';\n              }\n              e.target.unselect();\n            });\n\n            cy.on('taphold', 'edge', (e) => {\n              const edge = e.target.json();\n              removeEdge(edge.data.source, edge.data.target);\n            });\n\n            cy.on('taphold', 'node', (e) => {\n              const node = e.target.json();\n              if (node.data.id === targetSelected) {\n                targetSelected = '';\n                setTargetSelected('');\n              } else if (node.data.id === sourceSelected) {\n                sourceSelected = '';\n                setSourceSelected('');\n              }\n              removeNode(node.data.id);\n            });\n          }\n\n          if (!initialised) {\n            setInitialised();\n          }\n        }}\n      />\n    </div>\n  );\n};\n\nexport default graph;\n","import React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCaretDown } from '@fortawesome/free-solid-svg-icons';\nimport config from '../constant/config';\nimport './Legend.css';\n\nconst renderLegend = (legends) => legends.map((legend) => (\n  <span className=\"legend-item\">\n    •\n    <span style={{ color: `var(${legend.colour})` }}>\n      {` ${legend.name}`}\n    </span>\n  </span>\n));\n\nconst legend = () => {\n  const [expanded, setExpanded] = useState(true);\n  return (\n    <div className={expanded ? 'legend-container expanded' : 'legend-container'}>\n      <button\n        className=\"legend-title\"\n        onClick={() => setExpanded(!expanded)}\n        type=\"button\"\n      >\n        Legend\n        { ' ' }\n        <FontAwesomeIcon\n          icon={faCaretDown}\n          className=\"caret-down\"\n        />\n      </button>\n      {renderLegend(config.legendDicts)}\n    </div>\n  );\n};\n\nexport default legend;\n","import bfs from './bfs';\nimport dijkstra from './dijkstra';\n\nexport default [\n  bfs,\n  dijkstra,\n];\n","import { createStep } from '../util/util';\n\nexport default {\n  name: 'Breadth First Search',\n  weighted: false,\n  notDirectional: false,\n  presets: [\n    {\n      name: 'BFS PRESET 1',\n      matrix: [\n        [0, 1, 0, 1], // eslint-disable-line\n        [0, 0, 0, 1], // eslint-disable-line\n        [0, 0, 0, 1], // eslint-disable-line\n        [1, 1, 1, 0], // eslint-disable-line\n      ],\n    },\n  ],\n  description: `\n  ##### Description [[1](https://brilliant.org/wiki/breadth-first-search-bfs/)]\n  Breadth-first search (BFS) is an important graph search algorithm that is used to solve\n  many problems including finding the shortest path in a graph and solving puzzle games\n  (such as Rubik's Cubes). Many problems in computer science can be thought of in terms of graphs.\n  For example, analyzing networks, mapping routes, and scheduling are graph problems.\n  Graph search algorithms like breadth-first search are useful for analyzing and solving graph\n  problems.\n\n  ##### Time and space complexity [[2](https://en.wikipedia.org/wiki/Breadth-first_search)]\n  The time complexity can be expressed as \\`O(|V|+|E|)\\`, since every vertex and\n  every edge will be explored in the worst case. \\`|V|\\` is the number of vertices and \\`|E|\\` is\n  the number of edges in the graph. Note that \\`O(|E|)\\` may vary between \\`O(1)\\` and \\`O(|V|^2)\\`,\n  depending on how sparse the input graph is.\n\n  When the number of vertices in the graph is known ahead of time, and additional data structures\n  are used to determine which vertices have already been added to the queue, the space complexity\n  can be expressed as \\`O(|V|)\\`, where \\`|V|\\` is the number of vertices. This is in addition to\n  the space required for the graph itself, which may vary depending on the graph representation\n  used by an implementation of the algorithm.\n\n  When working with graphs that are too large to store explicitly (or infinite), it is more\n  practical to describe the complexity of breadth-first search in different terms: to find the\n  nodes that are at distance d from the start node (measured in number of edge traversals), BFS\n  takes \\`O(b^(d + 1))\\` time and memory, where b is the \"branching factor\" of the graph\n  (the average out-degree).\n\n  ##### BFS Pseudocode\n  \\`\\`\\`\n  procedure BFS(G, root) is\n    let Q be a queue\n    label root as explored\n    Q.enqueue(root)\n    if source is the goal then\n        return source\n    while Q is not empty do\n        v := Q.dequeue()\n        for all edges from v to w in G.adjacentEdges(v) do\n            if w is not labeled as explored then\n                label w as explored\n                Q.enqueue(w)\n                if w is the goal then\n                    return w\n  \\`\\`\\`\n\n  ---\n  \n  Sources\n  * [1] [https://brilliant.org/wiki/breadth-first-search-bfs/](https://brilliant.org/wiki/breadth-first-search-bfs/)\n  * [2] [https://en.wikipedia.org/wiki/Breadth-first_search](https://en.wikipedia.org/wiki/Breadth-first_search)\n`,\n  pseudocode: `procedure BFS(G, root) is\n    {{0}}\n    let Q be a queue\n    label root as explored\n    Q.enqueue(root)\n    {{/0}}\n    {{1}}\n    if source is the goal then\n    {{/1}}\n        {{2}}\n        return source\n        {{/2}}\n    while Q is not empty do\n        {{3}}\n        v := Q.dequeue()\n        {{/3}}\n        {{4}}\n        for all edges from v to w in G.adjacentEdges(v) do\n        {{/4}}\n            {{5}}\n            if w is not labeled as explored then\n            {{/5}}\n                {{6}}\n                label w as explored\n                Q.enqueue(w)\n                {{/6}}\n                {{7}}\n                if w is the goal then\n                {{/7}}\n                    {{8}}\n                    return w\n                    {{/8}}`,\n  algorithm: (graph, source, dest, directed) => {\n    const steps = []; // list to store each 'step' of the algorithm\n    const queue = [];\n    const prev = new Array(graph.length).fill(null);\n    const explored = new Array(graph.length).fill(false); // explored nodes\n    const traversed = []; // traversed edges\n    let dontSkipQueue = true;\n    queue.push(source);\n    explored[source] = true;\n\n    let msg = 'Initialising queue';\n    steps.push(createStep(explored, traversed, source, '', 0, msg, prev));\n\n    msg = `Checking if node ${source} is destination`;\n    steps.push(createStep(explored, traversed, source, '', 1, msg, prev));\n\n    if (source === parseInt(dest, 10)) {\n      msg = `Found destination node: ${source}`;\n      steps.push(createStep(explored, traversed, source, '', 2, msg, prev));\n\n      dontSkipQueue = false; // skip loop as we have found destination\n    }\n\n    while (queue.length !== 0 && dontSkipQueue) {\n      const v = queue.shift();\n\n      msg = `Dequeuing node ${v} from queue`;\n      steps.push(createStep(explored, traversed, v, '', 3, msg, prev));\n\n      for (let i = 0; i < graph.length; i += 1) {\n        if (graph[v][i] > 0 || (!directed && graph[i][v] > 0)) { // edge is adjacent to v\n          msg = `Checking adjacent nodes to node ${v}`;\n          steps.push(createStep(explored, traversed, v, '', 4, msg, prev));\n\n          msg = `Checking if node ${i} has been visited`;\n          const edge = (!directed && graph[i][v] > 0) ? `${i} ${v}` : `${v} ${i}`;\n          steps.push(createStep(explored, traversed, v, edge, 5, msg, prev));\n          traversed.push(edge);\n          if (!explored[i]) { // not visited\n            explored[i] = true;\n            queue.push(i);\n            prev[i] = i !== 0 ? v : null;\n\n            msg = `Marking node ${i} as visited and adding it to queue`;\n            steps.push(createStep(explored, traversed, v, '', 6, msg, prev));\n\n            msg = `Checking if node ${i} is destination`;\n            steps.push(createStep(explored, traversed, v, '', 7, msg, prev));\n\n            if (i === parseInt(dest, 10)) {\n              msg = `Found destination node: ${i}`;\n              steps.push(createStep(explored, traversed, i, '', 8, msg, prev));\n\n              dontSkipQueue = false;\n              break; // exit loop as we have found destination\n            }\n          }\n        }\n      }\n    }\n    return steps;\n  },\n};\n","import { extractMin, createStep } from '../util/util';\n\nexport default {\n  name: 'Dijkstra\\'s algorithm',\n  weighted: true,\n  notDirectional: false,\n  presets: [\n    {\n      name: 'DIJKSTRA PRESET 1',\n      matrix: [\n        [0, 0, 1, 0, 0], // eslint-disable-line\n        [1, 0, 1, 1, 0], // eslint-disable-line\n        [0, 1, 0, 0, 0], // eslint-disable-line\n        [0, 1, 0, 0, 0], // eslint-disable-line\n        [1, 0, 0, 1, 0], // eslint-disable-line\n      ],\n    },\n  ],\n  description: `\n  ##### Description [[1](https://brilliant.org/wiki/dijkstras-short-path-finder/)]\n  One algorithm for finding the shortest path from a starting node to a target node in a\n  weighted graph is Dijkstra’s algorithm. The algorithm creates a tree of shortest paths\n  from the starting vertex, the source, to all other points in the graph.\n\n  Dijkstra’s algorithm, published in 1959 and named after its creator Dutch computer scientist\n  Edsger Dijkstra, can be applied on a weighted graph. The graph can either be directed or\n  undirected. One stipulation to using the algorithm is that the graph needs to have a\n  nonnegative weight on every edge.\n\n  ##### Time and space complexity [[2](https://iq.opengenus.org/time-and-space-complexity-of-dijkstra-algorithm/)]\n  Using the approach below, using an unsorted array, we search through all vertices to find the\n  closest within the graph. This means that our initial time complexity will be \\`O(n)\\` for this search.\n  This will bring our total time complexity to \\`O(V^2)\\` where \\`V\\` is the number of vertices in the graph.\n  Space complexity will be \\`O(V)\\` where \\`V\\` is number of vertices in graph, it is worse case scenario\n  if it is a complete graph and every edge has to be visited.\n\n  ##### Dijkstra Pseudocode\n  \\`\\`\\`\n  function Dijkstra(Graph, source):\n    create vertex set Q\n    for each vertex v in Graph:\n        dist[v] ← INFINITY\n        prev[v] ← UNDEFINED\n        add v to Q\n    dist[source] ← 0\n    while Q is not empty:\n        u ← vertex in Q with min dist[u]\n        remove u from Q\n        for each neighbor v of u still in Q:\n            alt ← dist[u] + length(u, v)\n            if alt < dist[v]:\n                dist[v] ← alt\n                prev[v] ← u\n     return dist[], prev[]\n  \\`\\`\\`\n\n  ---\n\n  Sources\n  * [1] [https://brilliant.org/wiki/dijkstras-short-path-finder/](https://brilliant.org/wiki/dijkstras-short-path-finder/)\n  * [2] [https://iq.opengenus.org/time-and-space-complexity-of-dijkstra-algorithm/](https://iq.opengenus.org/time-and-space-complexity-of-dijkstra-algorithm/)\n`,\n  pseudocode: `function Dijkstra(Graph, source):\n    {{0}}\n    create vertex set Q\n    {{/0}}\n    {{1}}\n    for each vertex v in Graph:\n    {{/1}}\n        {{2}}\n        dist[v] ← INFINITY\n        prev[v] ← UNDEFINED\n        add v to Q\n        {{/2}}\n    {{3}}\n    dist[source] ← 0\n    {{/3}}\n    while Q is not empty:\n        {{4}}\n        u ← vertex in Q with min dist[u]\n        remove u from Q\n        {{/4}}\n        {{5}}\n        for each neighbor v of u still in Q:\n        {{/5}}\n            {{6}}\n            alt ← dist[u] + length(u, v)\n            {{/6}}\n            {{7}}\n            if alt < dist[v]:\n            {{/7}}\n                {{8}}\n                dist[v] ← alt\n                prev[v] ← u\n                {{/8}}\n     {{9}}\n     return dist[], prev[]\n     {{/9}}`,\n  algorithm: (graph, source, dest, directed) => {\n    const steps = [];\n    const explored = new Array(graph.length).fill(false);\n    const traversed = [];\n\n    const queue = [];\n    const dist = [];\n    const prev = [];\n\n    let msg = 'Initialising queue';\n    steps.push(createStep(explored, traversed, '', '', 0, msg, prev, dist));\n\n    for (let v = 0; v < graph.length; v += 1) {\n      msg = 'Looping through graph vertices';\n      steps.push(createStep(explored, traversed, '', '', 1, msg, prev, dist));\n\n      dist.push(Infinity);\n      prev.push(null);\n      queue.push(v);\n\n      msg = 'Initialising dist, prev and adding vertices to queue';\n      steps.push(createStep(explored, traversed, '', '', 2, msg, prev, dist));\n    }\n    dist[source] = 0;\n\n    msg = 'Setting distance from source to source to 0';\n    steps.push(createStep(explored, traversed, '', '', 3, msg, prev, dist));\n\n    while (queue.length > 0) {\n      const u = extractMin(queue, dist);\n\n      queue.splice(queue.indexOf(u), 1);\n\n      explored[u] = true;\n      msg = 'Getting node from queue with smallest distance from source';\n      steps.push(createStep(explored, traversed, u, '', 4, msg, prev, dist));\n\n      for (let v = 0; v < graph[u].length; v += 1) {\n        if (graph[u][v] > 0 || (!directed && graph[v][u] > 0)) {\n          msg = `Checking adjacent nodes to node ${u}`;\n          steps.push(createStep(explored, traversed, u, '', 5, msg, prev, dist));\n\n          let alt;\n          let edge;\n          if (!directed && graph[v][u] > 0) {\n            alt = parseInt(dist[u], 10) + parseInt(graph[v][u], 10);\n            edge = `${v} ${u}`;\n          } else {\n            alt = parseInt(dist[u], 10) + parseInt(graph[u][v], 10);\n            edge = `${u} ${v}`;\n          }\n\n          traversed.push(edge);\n          msg = `Calculating weight when going to node ${v} via ${u} from source`;\n          steps.push(createStep(explored, traversed, u, edge, 6, msg, prev, dist));\n\n          msg = `Comparing calculated distance to known distance from source to node ${v}`;\n          steps.push(createStep(explored, traversed, u, edge, 7, msg, prev, dist));\n\n          if (alt < dist[v]) {\n            dist[v] = alt;\n            prev[v] = u;\n\n            msg = `Updating distance from source to ${v} and node previous to ${v}`;\n            steps.push(createStep(explored, traversed, u, edge, 8, msg, prev, dist));\n          }\n        }\n      }\n    }\n\n    const seq = [];\n    let u = dest;\n    if (dist[u] !== Infinity) {\n      while (u) {\n        seq.push(u);\n        u = prev[u];\n      }\n      seq.push(source);\n    }\n\n    msg = 'Finished, returning distances to each node from source';\n    steps.push(createStep(explored, traversed, '', '', 9, msg, prev, dist));\n\n    // add the steps to show the path target -> source\n    if (seq.length > 0) {\n      const pathHighlight = []; // array of edges to be highlighted\n      for (let i = 0; i < seq.length - 1; i += 1) {\n        msg = `${seq[i]} -> ${seq[i + 1]}`;\n        pathHighlight.push(`${seq[i + 1]} ${seq[i]}`);\n        steps.push(createStep(explored, traversed, '', '', null, msg, prev, dist, pathHighlight));\n      }\n    }\n\n    return steps;\n  },\n};\n","import React, { Component } from 'react';\nimport CreateTools from './CreateTools';\nimport AlgorithmSelector from './AlgorithmSelector';\nimport Playback from './Playback';\nimport CodeViewer from './CodeViewer';\nimport Graph from './Graph';\nimport Legend from './Legend';\nimport algorithms from '../algorithms';\nimport config from '../constant/config';\nimport {\n  randomMatix,\n  buildGraphFromMatrix,\n  highlightGraph,\n  genPathEdgeStles,\n  flattenMatrix,\n  convertPrev,\n} from '../util/util';\nimport './GraphBuilder.css';\n\nconst ensureInteger = (v) => v.replace(/[^\\d]+/, '');\n\nclass GraphBuilder extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentAlgorithm: algorithms[0],\n      directedMatrix: randomMatix(config.defaultMatrixSize),\n      undirectedMatrix: [], // assigned in componentDidMount()\n      sourceNode: 0,\n      destNode: config.defaultMatrixSize - 1,\n      sourceSelected: '',\n      targetSelected: '',\n      weight: '',\n      updated: false,\n      newestNodePos: null,\n      currentPreset: '',\n      graphInitialised: false,\n      directed: true,\n      speed: 1, // current speed multiplier for the animation\n      playing: false, // whether or not the animation is paused\n      updatedSincePlay: true, // has graph updated, default true\n      steps: [], // the steps for the animation\n      currentStep: 0, // the index for the current step\n      animationStyles: [], // list of the styles for the current step of animation\n      logMessages: [], // list of messages from animation and user actions\n    };\n  }\n\n  componentDidMount() {\n    const { directedMatrix } = this.state;\n    this.setState({\n      undirectedMatrix: flattenMatrix(directedMatrix),\n    });\n  }\n\n  runAnimation(initialise = false) {\n    const {\n      playing,\n      speed,\n      currentStep,\n      steps,\n      logMessages,\n      currentAlgorithm,\n    } = this.state;\n    if (playing || initialise) {\n      if (initialise) {\n        this.setState({\n          logMessages: [\n            ...logMessages,\n            {\n              service: 'Animation',\n              value: `** Started ${currentAlgorithm.name} algorithm`,\n            },\n          ],\n        });\n      }\n      setTimeout(() => this.runAnimation(), 250 / speed);\n      this.changeStep(1);\n    }\n    // stop when at end\n    if (currentStep >= steps.length - 1 && !initialise) {\n      this.setState({ playing: false });\n    }\n  }\n\n  changeAlgorithm(i) {\n    if (i < algorithms.length && i !== -1) {\n      const { logMessages } = this.state;\n      this.setState({\n        currentAlgorithm: algorithms[i],\n        currentPreset: '',\n        logMessages: [\n          ...logMessages,\n          {\n            service: 'User',\n            value: `Switched algorithm to ${algorithms[i].name}`,\n          },\n        ],\n      });\n      this.resetSteps();\n    }\n  }\n\n  changePreset(i) {\n    const { currentAlgorithm, logMessages } = this.state;\n\n    if (i < currentAlgorithm.presets.length && i !== -1) {\n      this.updateMatrix(currentAlgorithm.presets[i].matrix);\n      this.setState({\n        currentPreset: currentAlgorithm.presets[i].name,\n        logMessages: [\n          ...logMessages,\n          {\n            service: 'User',\n            value: `Changed graph to ${currentAlgorithm.presets[i].name} preset`,\n          },\n        ],\n      });\n      this.resetSteps();\n    }\n  }\n\n  updateMatrix(m) {\n    const {\n      sourceNode,\n      destNode,\n      directed,\n      logMessages,\n    } = this.state;\n\n    for (let i = 0; i < m.length; i += 1) {\n      if (m.length !== m[i].length) {\n        return;\n      }\n    }\n\n    if (directed) {\n      this.setState({\n        directedMatrix: m,\n      });\n    } else {\n      this.setState({\n        undirectedMatrix: flattenMatrix(m), // ensure matrix has no double edges\n      });\n    }\n\n    this.setState({\n      sourceNode: sourceNode >= m.length ? 0 : sourceNode,\n      destNode: destNode >= m.length ? m.length - 1 : destNode,\n      logMessages: [\n        ...logMessages,\n        {\n          service: 'User',\n          value: 'Updated the graph',\n        },\n      ],\n    });\n\n    this.resetSteps();\n  }\n\n  addNode(pos = null) {\n    const {\n      directedMatrix,\n      undirectedMatrix,\n      directed,\n      logMessages,\n    } = this.state;\n\n    if (directed) {\n      for (let i = 0; i < directedMatrix.length; i += 1) {\n        directedMatrix[i].push(0);\n      }\n      directedMatrix.push(Array(directedMatrix.length + 1).fill(0));\n    } else {\n      for (let i = 0; i < undirectedMatrix.length; i += 1) {\n        undirectedMatrix[i].push(0);\n      }\n      undirectedMatrix.push(Array(undirectedMatrix.length + 1).fill(0));\n    }\n\n    if (pos) {\n      this.setState({\n        newestNodePos: pos,\n      });\n    }\n\n    const vertex = directed ? directedMatrix.length : undirectedMatrix.length;\n    this.setState({\n      logMessages: [\n        ...logMessages,\n        {\n          service: 'User',\n          value: `Added a new node (${vertex - 1}) to graph`,\n        },\n      ],\n    });\n\n    this.resetSteps();\n  }\n\n  removeNode(i) {\n    const {\n      directedMatrix,\n      undirectedMatrix,\n      directed,\n      logMessages,\n    } = this.state;\n\n    if (!ensureInteger(i) || i.length === 0) {\n      return;\n    }\n\n    const matrix = directed ? directedMatrix : undirectedMatrix;\n\n    if (i >= matrix.length) {\n      return;\n    }\n\n    if (directed) {\n      // remove the node\n      directedMatrix.splice(i, 1);\n      // remove connections from other nodes\n      for (let j = 0; j < matrix.length; j += 1) {\n        directedMatrix[j].splice(i, 1);\n      }\n      this.setState({\n        directedMatrix,\n      });\n    } else {\n      // remove the node\n      undirectedMatrix.splice(i, 1);\n      // remove connections from other nodes\n      for (let j = 0; j < matrix.length; j += 1) {\n        undirectedMatrix[j].splice(i, 1);\n      }\n      this.setState({\n        undirectedMatrix,\n      });\n    }\n\n    this.setState({\n      updated: true,\n      logMessages: [\n        ...logMessages,\n        {\n          service: 'User',\n          value: `Removed node ${i} from graph`,\n        },\n      ],\n    });\n    this.resetSteps();\n  }\n\n  addEdge() {\n    const {\n      sourceSelected,\n      targetSelected,\n      directedMatrix,\n      undirectedMatrix,\n      directed,\n      weight,\n      logMessages,\n    } = this.state;\n\n    let weightValue = 1;\n\n    if (sourceSelected.length === 0 || targetSelected.length === 0) {\n      this.setState({\n        logMessages: [\n          ...logMessages,\n          {\n            service: 'User',\n            value: 'Unable to create edges between the selected nodes',\n          },\n        ],\n      });\n      return;\n    }\n\n    if (!ensureInteger(sourceSelected) || !ensureInteger(targetSelected)) {\n      this.setState({\n        logMessages: [\n          ...logMessages,\n          {\n            service: 'User',\n            value: 'Unable to create edges between the selected nodes',\n          },\n        ],\n      });\n      return;\n    }\n\n    if (ensureInteger(weight) && weight.length > 0) {\n      weightValue = weight;\n    }\n\n    const matrix = directed ? directedMatrix : undirectedMatrix;\n\n    if (sourceSelected >= matrix.length || targetSelected >= matrix.length) {\n      this.setState({\n        logMessages: [\n          ...logMessages,\n          {\n            service: 'User',\n            value: 'Unable to create edges between the selected nodes',\n          },\n        ],\n      });\n      return;\n    }\n\n    // update to add edge between nodes and reset source/target selected\n    if (directed) {\n      directedMatrix[sourceSelected][targetSelected] = weightValue;\n    } else if (!undirectedMatrix[targetSelected][sourceSelected] > 0) {\n      // make sure there isn't already and edge\n      undirectedMatrix[sourceSelected][targetSelected] = weightValue;\n    }\n\n    this.setState({\n      sourceSelected: '',\n      targetSelected: '',\n      logMessages: [\n        ...logMessages,\n        {\n          service: 'User',\n          value: `Created an edge from ${sourceSelected} to ${targetSelected}`,\n        },\n      ],\n    });\n    this.resetSteps();\n  }\n\n  removeEdge(source, target) {\n    const {\n      directedMatrix,\n      undirectedMatrix,\n      directed,\n      logMessages,\n    } = this.state;\n\n    if (!ensureInteger(source) || !ensureInteger(target)) {\n      return;\n    }\n\n    // update to remove edge between source/target\n    if (directed) {\n      directedMatrix[source][target] = 0;\n    } else {\n      // remove both possible edges\n      undirectedMatrix[source][target] = 0;\n      undirectedMatrix[target][source] = 0;\n    }\n\n    this.setState({\n      logMessages: [\n        ...logMessages,\n        {\n          service: 'User',\n          value: `Remove the edge from node ${source} to node ${target}`,\n        },\n      ],\n    });\n\n    this.resetSteps();\n  }\n\n  updateWeight(id, i, j) {\n    const {\n      currentAlgorithm,\n      weight,\n      directedMatrix,\n      undirectedMatrix,\n      directed,\n      logMessages,\n    } = this.state;\n    const { weighted } = currentAlgorithm;\n\n    if (!weighted || i.length === 0 || j.length === 0 || weight.length === 0) {\n      return;\n    }\n\n    if (!ensureInteger(weight) || !ensureInteger(i) || !ensureInteger(j)) {\n      return;\n    }\n\n    if (directed) {\n      directedMatrix[i][j] = weight;\n    } else if (undirectedMatrix[i][j] > 0) {\n      undirectedMatrix[i][j] = weight;\n    } else {\n      undirectedMatrix[j][i] = weight;\n    }\n\n    this.setState({\n      logMessages: [\n        ...logMessages,\n        {\n          service: 'User',\n          value: `Updated the weight of edge ${i} -> ${j} to be ${weight}`,\n        },\n      ],\n    });\n\n    this.resetSteps();\n  }\n\n  generateSteps() {\n    const {\n      currentAlgorithm,\n      directedMatrix,\n      undirectedMatrix,\n      directed,\n      sourceNode,\n      destNode,\n    } = this.state;\n\n    const matrix = directed ? directedMatrix : undirectedMatrix;\n    let source = sourceNode;\n    if (sourceNode === '' || sourceNode >= matrix.length) {\n      source = 0;\n    }\n    const steps = currentAlgorithm.algorithm(matrix, source, destNode, directed);\n\n    this.setState({ steps });\n  }\n\n  changeStep(v) {\n    const {\n      steps,\n      currentStep,\n      directed,\n      logMessages,\n    } = this.state;\n\n    if (v === 1 && currentStep + 1 < steps.length) {\n      this.setState({ currentStep: currentStep + 1 });\n    } else if (v === -1 && currentStep - 1 >= 0) {\n      this.setState({ currentStep: currentStep - 1 });\n    }\n    if (steps[currentStep]) {\n      const animationStyles = highlightGraph(steps[currentStep], directed);\n      this.setState({\n        animationStyles,\n        logMessages: [\n          ...logMessages,\n          {\n            service: 'Animation',\n            value: steps[currentStep].logMessage,\n          },\n        ],\n      });\n    }\n  }\n\n  updateSourceDest(id, type) {\n    const {\n      logMessages,\n      directedMatrix,\n      undirectedMatrix,\n      directed,\n    } = this.state;\n    let typeStr = '';\n    if (type === 's') { // source\n      this.setState({ sourceNode: id });\n      typeStr = 'source';\n    } else if (type === 'd') { // dest\n      this.setState({ destNode: id });\n      typeStr = 'target';\n    }\n\n    const matrix = directed ? directedMatrix : undirectedMatrix;\n\n    let message = `Updated ${typeStr} to node ${id}`;\n    if (id >= matrix.length) {\n      message = `Node ${id} does not exist on graph`;\n    } else if (id === '') {\n      if (type === 's') {\n        message = 'Invalid node will default source to 0';\n      } else if (type === 'd') {\n        message = 'Invalid node setting target to none';\n      }\n    }\n\n    this.setState({\n      logMessages: [\n        ...logMessages,\n        {\n          service: 'User',\n          value: `${message}`,\n        },\n      ],\n    });\n\n    this.resetSteps();\n  }\n\n  resetSteps() {\n    // reset the step related states when graph updates\n    this.setState({\n      playing: false,\n      updatedSincePlay: true,\n      steps: [],\n      currentStep: 0,\n      animationStyles: [],\n    });\n  }\n\n  render() {\n    const {\n      directedMatrix,\n      undirectedMatrix,\n      currentAlgorithm,\n      sourceNode,\n      destNode,\n      updated,\n      currentPreset,\n      newestNodePos,\n      sourceSelected,\n      targetSelected,\n      graphInitialised,\n      weight,\n      directed,\n      speed,\n      playing,\n      currentStep,\n      steps,\n      updatedSincePlay,\n      animationStyles,\n      logMessages,\n    } = this.state;\n\n    const { weighted } = currentAlgorithm;\n\n    // set -inf if there currently are no steps\n    // user has not pressed play or has updated the graph\n    let codeSection = -Infinity;\n    let edgeWeights = [];\n    let pathStyles = [];\n    let prevStyles = [];\n    if (steps[currentStep] && !updatedSincePlay) {\n      codeSection = steps[currentStep].codeSection;\n      edgeWeights = steps[currentStep].nodeWeights;\n      if (steps[currentStep].path.length > 0) {\n        if (steps[currentStep].prev.length > 0) {\n          const prevEdges = convertPrev(steps[currentStep].prev, directed);\n          prevStyles = genPathEdgeStles(prevEdges, directed, '--color-previous', 2);\n        }\n        pathStyles = genPathEdgeStles(steps[currentStep].path, directed);\n      } else if (currentStep >= steps.length - 1) { // for non-weighted algorithms\n        const prevEdges = convertPrev(steps[currentStep].prev, directed);\n        prevStyles = genPathEdgeStles(prevEdges, directed, '--color-previous', 2);\n      }\n    }\n\n    const matrix = directed ? directedMatrix : undirectedMatrix;\n    const graphElements = buildGraphFromMatrix(matrix, weighted, newestNodePos);\n\n    return (\n      <div id=\"graphBuilder\" className=\"graph-builder\">\n        <div id=\"controls\" className=\"controls\">\n          <CreateTools\n            updateMatrix={(m) => this.updateMatrix(m)}\n            updateSource={(v) => this.updateSourceDest(v, 's')}\n            updateDest={(v) => this.updateSourceDest(v, 'd')}\n            setUpdated={() => this.setState({ updated: true })}\n            setWeight={(v) => this.setState({ weight: v })}\n            selectPreset={(i) => this.changePreset(i)}\n            presets={currentAlgorithm.presets.map((v) => v.name)}\n            numNodes={matrix.length}\n            source={sourceNode}\n            dest={destNode}\n            weight={weight}\n            weighted={weighted}\n            currentPreset={currentPreset}\n          />\n          <AlgorithmSelector\n            currentAlgorithm={currentAlgorithm.name}\n            algorithmObj={currentAlgorithm}\n            selectAlgorithm={(i) => this.changeAlgorithm(i)}\n            algorithms={algorithms.map((v) => v.name)}\n            setDirected={(v) => this.setState({ directed: v })}\n            directed={directed}\n          />\n          <Playback\n            curSpeed={speed}\n            setCurSpeed={(v) => this.setState({ speed: v })}\n            playing={playing}\n            setPlaying={() => this.setState({ playing: !playing })}\n            stepBack={() => this.changeStep(-1)}\n            stepForward={() => this.changeStep(1)}\n            currentStep={currentStep}\n            nSteps={steps.length}\n            updatedSincePlay={updatedSincePlay}\n            setUpdatedSincePlay={(v) => this.setState({ updatedSincePlay: v })}\n            generateSteps={() => this.generateSteps()}\n            runAnimation={(v) => this.runAnimation(v)}\n          />\n        </div>\n        <div className=\"graph-code-container\">\n          <Graph\n            setUpdated={() => this.setState({ updated: false })}\n            addNode={(pos) => this.addNode(pos)}\n            removeNode={(i) => this.removeNode(i)}\n            addEdge={() => this.addEdge()}\n            removeEdge={(source, target) => this.removeEdge(source, target)}\n            setSourceSelected={(id) => this.setState({ sourceSelected: id })}\n            setTargetSelected={(id) => this.setState({ targetSelected: id })}\n            setInitialised={() => this.setState({ graphInitialised: true })}\n            updateWeight={(id, i, j) => this.updateWeight(id, i, j)}\n            graphElements={graphElements}\n            source={sourceNode}\n            dest={destNode}\n            updated={updated}\n            sourceSelected={sourceSelected}\n            targetSelected={targetSelected}\n            initialised={graphInitialised}\n            directed={directed}\n            animationStyles={animationStyles}\n            edgeWeights={edgeWeights}\n            pathStyles={[...prevStyles, ...pathStyles]}\n          />\n          <CodeViewer\n            code={currentAlgorithm.pseudocode}\n            codeSection={codeSection}\n            log={logMessages}\n          />\n          <Legend />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GraphBuilder;\n","import React from 'react';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\nimport GraphBuilder from './components/GraphBuilder';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Header />\n      <div className=\"content\">\n        <GraphBuilder />\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","module.exports = {\n  developerUrl: 'https://github.com/AmazonPriime',\n  developerWebsite: 'https://amazonpriime.github.io/',\n  sourceCode: 'https://github.com/AmazonPriime/Algorithm-Animator',\n  linkedin: 'https://www.linkedin.com/in/luke-holland-/',\n  minCharMessage: 'Requires at least {min} characters',\n  contactFormSuccess: 'Message has been submitted!',\n  contactFormFailure: 'Unable to submit message.',\n  contactFormError: 'Errors in the form above.',\n  emailMessage: 'Must be in the form \\'name@example.com\\'',\n  formspreeEndpoint: 'https://formspree.io/f/xgerjqba',\n  invalidNodeError: 'Invalid node, graph only contains {numNodes} nodes!',\n  invalidNodeValue: 'Invalid node ID provided, must be a number!',\n  speeds: [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 3],\n  contentChars: 10,\n  firstnameChars: 2,\n  surnameChars: 2,\n  defaultMatrixSize: 7,\n  legendDicts: [\n    { name: 'Current', colour: '--color-current' },\n    { name: 'Visited', colour: '--color-visited' },\n    { name: 'Previous', colour: '--color-previous' },\n    { name: 'Path', colour: '--color-path' },\n    { name: 'Source', colour: '--color-source' },\n    { name: 'Target', colour: '--color-target' },\n    { name: 'Cost', colour: '--color-cost' },\n  ],\n  graphStyles: [\n    {\n      selector: 'node',\n      style: {\n        backgroundColor: 'white',\n        backgroundOpacity: 0,\n        borderWidth: 1,\n        height: '1.75em',\n        width: '1.75em',\n        content: 'data(label)',\n        color: 'black',\n        textValign: 'center',\n        fontSize: '0.7em',\n        fontWeight: '200',\n      },\n    },\n    {\n      selector: 'edge',\n      style: {\n        width: 2,\n        lineColor: 'black',\n        label: 'data(label)',\n        textRotation: 'autorotate',\n        fontSize: '0.7em',\n        textOutlineOpacity: 1,\n        textOutlineColor: 'black',\n        textOutlineWidth: 1,\n        textMarginY: '0',\n        fontWeight: 'bold',\n        color: 'white',\n        targetArrowColor: 'black',\n      },\n    },\n    {\n      selector: 'node:parent',\n      style: {\n        textValign: 'bottom',\n        textHalign: 'center',\n        borderWidth: 0,\n        content: 'data(label)',\n        fontSize: '0.4em',\n        fontWeight: 'bold',\n        color: 'red',\n        padding: 1,\n        textMarginY: -10,\n        shape: 'roundrectangle',\n      },\n    },\n  ],\n  graphLayout: {\n    name: 'cose-bilkent',\n    idealEdgeLength: 150,\n    nodeRepulsion: 7000,\n  },\n};\n"],"sourceRoot":""}